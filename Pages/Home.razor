@page "/"
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div style="margin-bottom: 24px">
    @if (File == null)
    {
        <p>Upload an attachment (optional)</p>

        <FluentInputFile Id="file-uploader"
                         Class="drag-drop-zone"
                         Mode="InputFileMode.Buffer"
                         Accept="image/*,.pdf"
                         OnProgressChange="OnProgressChangeAsync"
                         OnCompleted="OnCompleted">
            <div class="file-upload-content">
                <FluentIcon Value="@(new @Icons.Regular.Size20.ArrowUpload())" />
                <div><label for="file-uploader">Choose a file</label> or drop it here</div>
            </div>
        </FluentInputFile>
    }
    else
    {
        <p>Your attachments:</p>

        <div class="upload">
            @if (File.UploadComplete)
            {
                <div class="upload__info">
                    <FluentAnchor Appearance="Appearance.Hypertext" Href="#" OnClick="DownloadFileAsync">@File.Name</FluentAnchor>&nbsp;(@(FileSize(File.Data.Length)))
                </div>
            }
            else
            {
                <div class="upload__info upload__info--progress">
                    <span class="upload__filename">@File.Name</span>
                    <FluentProgress Min="0" Max="100" Value="Progress" Class="upload__progress" />
                    <span>(@(FileSize(File.Data.Length)) / @(FileSize(File.Size)))</span>
                </div>
            }

            <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())" Title="Delete attachment" OnClick="ClearFile" />
        </div>
    }
</div>

<div class="buttons">
    <FluentButton Appearance="Appearance.Accent">Done</FluentButton>
</div>

@code {
    private int? Progress => (File == null) ? null : (int)(((double)File.Data.Length / File.Size) * 100D);

    private string FileSize(long bytes) => ByteSize.FromBytes(bytes).ToBinaryString().Replace("i", "");
}
